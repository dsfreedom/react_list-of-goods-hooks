{"version":3,"sources":["Types/SortingParams.tsx","App.tsx","index.tsx"],"names":["SortType","goodsFromServer","SORT_FIELD_NAME","Name","SORT_FIELD_LENGTH","Length","App","useState","None","sortField","setSortField","isReversed","setReversed","isResetVisible","visibleGoods","goods","preparedGoods","sort","good1","good2","localeCompare","length","reverse","getPreparedGoods","className","type","onClick","classNames","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAAYA,E,6EAAAA,K,YAAAA,E,gBAAAA,E,SAAAA,M,gBCOCC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAGIC,EAA4BF,EAASG,KACrCC,EAA8BJ,EAASK,OAgCtC,IAAMC,EAAgB,WAC3B,MAAkCC,mBAAmBP,EAASQ,MAA9D,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAkCH,oBAAkB,GAApD,mBAAOI,EAAP,KAAmBC,EAAnB,KACMC,EAAiBF,GAAcF,IAAcT,EAASQ,KAEtDM,EAjCR,SACEC,EADF,GAGG,IADCN,EACF,EADEA,UAAWE,EACb,EADaA,WAEPK,EAAa,YAAOD,GAqB1B,OAnBIN,GACFO,EAAcC,MAAK,SAACC,EAAOC,GACzB,OAAQV,GACN,KAAKP,EACH,OAAOgB,EAAME,cAAcD,GAE7B,KAAKf,EACH,OAAOc,EAAMG,OAASF,EAAME,OAE9B,QACE,OAAO,MAKXV,GACFK,EAAcM,UAGTN,EAQcO,CACnBtB,EACA,CAAEQ,YAAWE,eAQf,OACE,sBAAKa,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLC,QAAS,kBAAMhB,EAAaR,IAC5BsB,UAAS,yBAAoBG,IAAW,CAAE,WAAYlB,IAAcP,KAHtE,iCAQA,wBACEuB,KAAK,SACLC,QAAS,kBAAMhB,EAAaN,IAC5BoB,UAAS,4BAAuBG,IAAW,CAAE,WAAYlB,IAAcL,KAHzE,4BAQA,wBACEqB,KAAK,SACLC,QAAS,kBAAMd,GAAaD,IAC5Ba,UAAS,4BAAuBG,IAAW,CAAE,YAAahB,KAH5D,qBAQCE,GACC,wBACEY,KAAK,SACLC,QAnCV,WACEhB,EAAaV,EAASQ,MACtBI,GAAY,IAkCJY,UAAU,4BAHZ,sBAUJ,6BACGV,EAAac,KAAI,SAAAC,GAAI,OACpB,oBAAI,UAAQ,OAAZ,SACGA,GADqBA,YCzGlCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.5d7b2937.chunk.js","sourcesContent":["export enum SortType {\n  Name = 'name',\n  Length = 'length',\n  None = '',\n}\n\nexport interface SortingParams {\n  sortField: SortType;\n  isReversed: boolean\n}\n","import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport classNames from 'classnames';\n\nimport { SortType, SortingParams } from './Types/SortingParams';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nconst SORT_FIELD_NAME: SortType = SortType.Name;\nconst SORT_FIELD_LENGTH: SortType = SortType.Length;\n\ntype Goods = string[];\n\nfunction getPreparedGoods(\n  goods: Goods,\n  { sortField, isReversed }: SortingParams,\n) {\n  const preparedGoods = [...goods];\n\n  if (sortField) {\n    preparedGoods.sort((good1, good2) => {\n      switch (sortField) {\n        case SORT_FIELD_NAME:\n          return good1.localeCompare(good2);\n\n        case SORT_FIELD_LENGTH:\n          return good1.length - good2.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (isReversed) {\n    preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortField, setSortField] = useState<SortType>(SortType.None);\n  const [isReversed, setReversed] = useState<boolean>(false);\n  const isResetVisible = isReversed || sortField !== SortType.None;\n\n  const visibleGoods = getPreparedGoods(\n    goodsFromServer,\n    { sortField, isReversed },\n  );\n\n  function resetSorting() {\n    setSortField(SortType.None);\n    setReversed(false);\n  }\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          onClick={() => setSortField(SORT_FIELD_NAME)}\n          className={`button is-info ${classNames({ 'is-light': sortField !== SORT_FIELD_NAME })}`}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          onClick={() => setSortField(SORT_FIELD_LENGTH)}\n          className={`button is-success ${classNames({ 'is-light': sortField !== SORT_FIELD_LENGTH })}`}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          onClick={() => setReversed(!isReversed)}\n          className={`button is-warning ${classNames({ 'is-light': !isReversed })}`}\n        >\n          Reverse\n        </button>\n\n        {isResetVisible && (\n          <button\n            type=\"button\"\n            onClick={resetSorting}\n            className=\"button is-danger is-light\"\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {visibleGoods.map(good => (\n          <li data-cy=\"Good\" key={good}>\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}